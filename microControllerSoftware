#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <FirebaseArduino.h>
#include <ArduinoJson.h>
#define WIFI_SSID "YDJZB"
#define WIFI_PASSWORD "dynamicairplane1"
#define FIREBASE_HOST "sink-timer.firebaseio.com"
#define FIREBASE_AUTH "7okfLTUu50zLUxjda1Vg3PWunm8CtLkihzfds9TK"


// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

const int buzzer = 14; //Buzzer connected to pin 8 of Arduino uno / mega
 #define  C     2100
 #define  D     1870 
 #define  E     1670
 #define  f     1580    // Does not seem to like capital F
 #define  G     1400 
 // Define a special note, 'R', to represent a rest
 #define  R     0
 int speakerOut = 14;
 // Do we want debugging on serial out? 1 for yes, 0 for no
 int DEBUG = 0;
 int melody[] = {E, E, E,R,
 E, E, E,R,
 E, G, C, D, E, R,
 f, f, f,f, f, E, E,E, E, D ,D,E, D, R, G ,R,
 E, E, E,R,
 E, E, E,R,
 E, G, C, D, E, R,
 f, f, f,f, f, E, E, E,  G,G, f, D, C,R };
 int MAX_COUNT = sizeof(melody) / 2; // Melody length, for looping.
 // Set overall tempo
 long tempo = 10000;
 // Set length of pause between notes
 int pause = 1000;
 // Loop variable to increase Rest length
 int rest_count = 100; //<-BLETCHEROUS HACK; See NOTES
 // Initialize core variables
 int tone_ = 0;
 int beat = 0;
 long duration  = 0;


 

boolean played = false;
int count = 0;
int rPin = 15;
int gPin =  13;
int bPin = 0;
int washLength = 700;
int brightness = 0;    // how bright the LED is
int fadeAmount = 5;    // how many points to fade the LED by




  // allocate the memory for the document

void setup()
{
  Serial.begin(115200);      //Only for debugging
  pinMode(12, INPUT); 
  pinMode(buzzer, OUTPUT);
  pinMode(rPin, OUTPUT);
  pinMode(gPin, OUTPUT);
  pinMode(bPin, OUTPUT);

  wifiConnect();
  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  delay(10);

  
  // Initialize a NTPClient to get time
  timeClient.begin();
  // Set offset time in seconds to adjust for your timezone, for example:
  // GMT +1 = 3600
  // GMT +8 = 28800
  // GMT -1 = -3600
  // GMT 0 = 0
  timeClient.setTimeOffset(0);
}
void loop() {
  int buttonState = digitalRead(12);
  //Serial.println(count);
  if (buttonState == LOW){
    if (count < washLength && count > 30) {
      // stopped washing hands too early.
      playTooEarly();
    }
    if (count > 30) {
      sendTimeData(count);
      }
    count = 0;
    noTone(buzzer);
    
  } else { 
    count++;
    
  }

  if (count >= washLength) {
    // LED: GREEN
    setColor(0,255,20);
    // YOU ARE FINISHED WASHING CHIME
    if (played == false) {
      playSuccess();
      
    }
  } else if (0 < count) {
    // LED: BLUE
    blueColor(gPin, bPin, brightness);
    brightness = brightness + fadeAmount;
    if (brightness <= 0 || brightness >= 255) {
       fadeAmount = -fadeAmount;
    }
    // PLAY SONG  
    playSong();
  } else {
    // SINK OFF
    setColor(0,0,0);
    played = false;
    }
  
  delay(30); //Small delay
}


void sendTimeData(int count){
  int t = washLength/20;
  int seconds = count/t;
  Firebase.push("Dates/-M3_C6ftSQWwulPMQOQA/2020-3-29/",seconds);

/*
  timeClient.update();
  unsigned long epochTime = timeClient.getEpochTime();
  String formattedTime = timeClient.getFormattedTime();
  //Get a time structure
  struct tm *ptm = gmtime ((time_t *)&epochTime); 
  int monthDay = ptm->tm_mday;
  int currentMonth = ptm->tm_mon+1;
  int currentYear = ptm->tm_year+1900;
  //Print complete date:
  String currentDate = String(currentYear) + "-" + String(currentMonth) + "-" + String(monthDay);
  Serial.println(currentDate);
  FirebaseObject data = Firebase.get("Dates/");
  JsonVariant hi = data.getJsonVariant();
  JsonArray& arr = hi.as<JsonArray>();
  arr.prettyPrintTo(Serial);

  /*
  const size_t capacity = JSON_ARRAY_SIZE(3) + JSON_ARRAY_SIZE(4) + JSON_ARRAY_SIZE(6) + 3*JSON_OBJECT_SIZE(1) + JSON_OBJECT_SIZE(3) + 170;
  DynamicJsonBuffer jsonBuffer(capacity);
  const char* json = "{\"-M3_9XbGmQRHZ4MAdPfs\":{\"todayTimestamp\":[42,18,31,11]},\"-M3_AxW91nkA9Z0w0tBV\":{\"todayTimestamp2\":[12,28,44,11,10,6]},\"-M3_C6ftSQWwulPMQO4A\":{\"todayTimestamp3\":[18,20,33]}}";
  JsonObject& root = jsonBuffer.parseObject(json);
  const char* error = root[]["todayTimestamp3"];
  if (error)
  {
    Serial.println(error);
    return;
  }
  /*
  String timeStamps[root.length];
  for (int i =0; i < root.length; i++) {
    timeStamps[i] = root[i][0];
    Serial.print(timeStamps[i]);
  }
  */
}



void setColor(int red, int green, int blue){ 
  analogWrite(rPin, red);
  analogWrite(gPin, green);
  analogWrite(bPin, blue);
}

void blueColor(int gPin, int bPin, int brightness) {
  analogWrite(bPin, brightness);
  analogWrite(gPin, brightness/12.75);
}

void playTooEarly() {
  for (int i = 0; i < 3; i++) {
      setColor(255,0,0);
      tone(buzzer,600);
      delay(160);
      setColor(0,0,0);
      noTone(buzzer);
      delay(130);
    }
}

void playSuccess() {
 tone(buzzer,2500);
 delay(115);
 noTone(buzzer);
 delay(75);
 tone(buzzer,2500);
 delay(50);
 noTone(buzzer);
 delay(100);
 tone(buzzer,2660);
 delay(300);
 noTone(buzzer);
 played = true;
}

void playSong() {
  /*
  while(1) {
  for (int i=0; i<MAX_COUNT; i++) {
    tone_ = melody[i];
    beat = 50;

    duration = beat * tempo; // Set up timing

    playTone();
    // A pause between notes...
    delayMicroseconds(pause);
  }
 }
 */
}
void playTone() {


   long elapsed_time = 0;
   if (tone_ > 0) { // if this isn't a Rest beat, while the tone has
     //  played less long than 'duration', pulse speaker HIGH and LOW
     while (elapsed_time < duration) {
       digitalWrite(speakerOut,HIGH);
       delayMicroseconds(tone_ / 2);
       // DOWN
       digitalWrite(speakerOut, LOW);
       delayMicroseconds(tone_ / 2);
       // Keep track of how long we pulsed
       elapsed_time += (tone_);
     }
   }
   else { // Rest beat; loop times delay
     for (int j = 0; j < rest_count; j++) { // See NOTE on rest_count
       delayMicroseconds(duration); 
     } 
   }           
 }

 void wifiConnect() {
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);             // Connect to the network
  Serial.print("Connecting to ");
  Serial.print(WIFI_SSID); Serial.println(" ...");

  int teller = 0;
  while (WiFi.status() != WL_CONNECTED)
  {                                       // Wait for the Wi-Fi to connect
    delay(1000);
    Serial.print(++teller); Serial.print(' ');
  }

  Serial.println('\n');
  Serial.println("Connection established!");  
  Serial.print("IP address:\t");
  Serial.println(WiFi.localIP());         // Send the IP address of the ESP8266 to the computer
}
